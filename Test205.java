/*
	Runnable을 생각하지 않고 Thread를 상속하여 run()을 오버라이딩 해 주고
	start()를 호출하면 OS로부터 가상의 분신(?쓰레드) 이 할당되어서 run()을 동작시킨다.
	
	--쓰레드를 생성하고 이용하는 두 번째 방법. (첫번째가 더 선호된다)
*/

class Kim extends Thread{
	public void run(){
		System.out.println("HelloWorld");
	}
}

public class Test205{
	public static void main(String[] args){
		Thread t = new Kim();
		t.start();
	}
}

/*
	쓰레드는 물리적인 CPU를 소프트웨어적으로 분신을 만드는 개념과 같다.
	이들은 독자적으로 독립적으로 구동되며(동시실행 가능), 메모리를 공유한다.
	
	4명으로 나누면 힘이 1/4로 분산된다. (드래곤볼의 천진반, 각각이 손오공을 상대(공유)함. 동시공격이 가능하더라.)
	그러면 왜 나누나?? -> 은행에 가서 서비스 받을 때
	
	할머니가 와서 길게 서비스를 받는 일이 생긴다면
	여러 쓰레드로 나눠서 동시에 서비스를 제공하는 쪽이 유리하다
	할머니를 한 쓰레드가 전담하는 동안 그 뒤의 손님은 우회할 수 있기 때문에,
	서비스를 제공하는 서버 프로그램에서 쓰레드 개념은 필수가 된다.
	
	java의 쓰레드 관련 설계는 정말 탁월하다.
	C 경우에는 표준으로 쓰레드를 제공하지 않고 POSIX 쓰레드 같은 별도 라이브러리에 의존한다.
	반면 자바는 아예 언어에 빌트인개념으로 제공되고 있고 간결하고 명확한 기능을 제공한다.
	: 쓰레드 + 네트웍 + I/O + 예외처리 ... 까지 서버 프로그램에 최적의 환경을 제공한다.
*/